Testdokument für die Testklasse T02Branches

Sinn und Zweck:
Diese Klasse definiert verschiedene Klassen- und Instanz-Methoden, welche Verzweigungen beinhalten.  
Es soll getestet werden, dass der CFG und die SSA richtig gebildet werden. Berücksichtig werden soll, 
das auch nicht implementierte Zweige einen Knoten erzeugen können.

Bytecode:

public void <init>()
	//nofStackSlots=1, nofLocalSlots=1, codeLen=5 
		  0 aload_0 [this]
		  1 invokespecial java/lang/Object(): void
		  4 return
		  
public static int if1(int)
	//nofStackSlots=2, nofLocalSlots=2, codeLen=17 
		  0 iload_0 [a]
		  1 ifle 11
		  4 iload_0 [a]
		  5 iconst_1
		  6 iadd
		  7 istore_1 [i]
		  8 goto 15
		 11 iload_0 [a]
		 12 iconst_1
		 13 isub
		 14 istore_1 [i]
		 15 iload_1 [i]
		 16 ireturn
		 
public static void if2()
	//nofStackSlots=2, nofLocalSlots=2, codeLen=24 
		  0 iconst_1
		  1 istore_0 [a]
		  2 iconst_2
		  3 istore_1 [b]
		  4 iload_0 [a]
		  5 iload_1 [b]
		  6 if_icmplt 15
		  9 bipush 6
		 11 istore_0 [a]
		 12 goto 18
		 15 bipush 8
		 17 istore_0 [a]
		 18 iload_0 [a]
		 19 istore_1 [b]
		 20 iinc a, 1
		 23 return
		 
public static void if3()
	//nofStackSlots=2, nofLocalSlots=5, codeLen=42 
		  0 iconst_0
		  1 istore_0 [x]
		  2 iconst_1
		  3 istore_1 [y]
		  4 iload_0 [x]
		  5 ifne 41
		  8 iload_1 [y]
		  9 iconst_1
		 10 if_icmpne 41
		 13 iinc x, 1
		 16 iload_0 [x]
		 17 iconst_1
		 18 if_icmpne 41
		 21 iinc y, 1
		 24 iload_1 [y]
		 25 iconst_2
		 26 if_icmpne 41
		 29 iconst_1
		 30 istore_2 [a]
		 31 iconst_2
		 32 istore_3 [b]
		 33 iload_2 [a]
		 34 iload_3 [b]
		 35 isub
		 36 istore [c]
		 38 iinc c, 1
		 41 return
		 
public void if4()
	//nofStackSlots=1, nofLocalSlots=4, codeLen=24 
		  0 iconst_1
		  1 istore_1 [bool]
		  2 iconst_1
		  3 istore_2 [a]
		  4 iconst_0
		  5 istore_3 [b]
		  6 iload_1 [bool]
		  7 ifeq 16
		 10 bipush 8
		 12 istore_3 [b]
		 13 goto 18
		 16 iconst_2
		 17 istore_3 [b]
		 18 iload_3 [b]
		 19 istore_2 [a]
		 20 iinc a, 1
		 23 return

CFG:
method <init>
	nodeNr:0 from 0 to 4	visited: false
		predecessor: 
		successor: 

method if1
	nodeNr:0 from 0 to 1	visited: false
		predecessor: 
		successor: CFG-Node [4:8]	CFG-Node [11:14]	
	nodeNr:1 from 4 to 8	visited: false
		predecessor: CFG-Node [0:1]	
		successor: CFG-Node [15:16]	
	nodeNr:2 from 11 to 14	visited: false
		predecessor: CFG-Node [0:1]	
		successor: CFG-Node [15:16]	
	nodeNr:3 from 15 to 16	visited: false
		predecessor: CFG-Node [4:8]	CFG-Node [11:14]	
		successor: 

method if2
	nodeNr:0 from 0 to 6	visited: false
		predecessor: 
		successor: CFG-Node [9:12]	CFG-Node [15:17]	
	nodeNr:1 from 9 to 12	visited: false
		predecessor: CFG-Node [0:6]	
		successor: CFG-Node [18:23]	
	nodeNr:2 from 15 to 17	visited: false
		predecessor: CFG-Node [0:6]	
		successor: CFG-Node [18:23]	
	nodeNr:3 from 18 to 23	visited: false
		predecessor: CFG-Node [9:12]	CFG-Node [15:17]	
		successor: 

method if3
	nodeNr:0 from 0 to 5	visited: false
		predecessor: 
		successor: CFG-Node [8:10]	CFG-Node [41:41]	
	nodeNr:1 from 8 to 10	visited: false
		predecessor: CFG-Node [0:5]	
		successor: CFG-Node [13:18]	CFG-Node [41:41]	
	nodeNr:2 from 13 to 18	visited: false
		predecessor: CFG-Node [8:10]	
		successor: CFG-Node [21:26]	CFG-Node [41:41]	
	nodeNr:3 from 21 to 26	visited: false
		predecessor: CFG-Node [13:18]	
		successor: CFG-Node [29:38]	CFG-Node [41:41]	
	nodeNr:4 from 29 to 38	visited: false
		predecessor: CFG-Node [21:26]	
		successor: CFG-Node [41:41]	
	nodeNr:5 from 41 to 41	visited: false
		predecessor: CFG-Node [0:5]	CFG-Node [8:10]	CFG-Node [13:18]	CFG-Node [21:26]	CFG-Node [29:38]	
		successor: 

method if4
	nodeNr:0 from 0 to 7	visited: false
		predecessor: 
		successor: CFG-Node [10:13]	CFG-Node [16:17]	
	nodeNr:1 from 10 to 13	visited: false
		predecessor: CFG-Node [0:7]	
		successor: CFG-Node [18:23]	
	nodeNr:2 from 16 to 17	visited: false
		predecessor: CFG-Node [0:7]	
		successor: CFG-Node [18:23]	
	nodeNr:3 from 18 to 23	visited: false
		predecessor: CFG-Node [10:13]	CFG-Node [16:17]	
		successor: 


SSA:
Method: <init>
   SSANode 0:
      EntrySet {[ ], [ ]}
         Monadic[sCloadVar] ( Void )
         Call[sCcall] (Object)
      ExitSet {[ ], [ Object ]}


Method: if1
   SSANode 0:
      EntrySet {[ , ], [ , ]}
         Monadic[sCloadVar] ( Void )
      ExitSet {[ , ], [ Integer (null), ]}

   SSANode 1:
      EntrySet {[ , ], [ Integer (null), ]}
         NoOpnd[sCloadConst]
         Dyadic[sCadd] ( Integer, Integer )
      ExitSet {[ , ], [ Integer (null), Integer (null) ]}

   SSANode 2:
      EntrySet {[ , ], [ Integer (null), ]}
         NoOpnd[sCloadConst]
         Dyadic[sCsub] ( Integer, Integer )
      ExitSet {[ , ], [ Integer (null), Integer (null) ]}

   SSANode 3:
      EntrySet {[ , ], [ Integer (null), Phi-Function ]}
         PhiFunction[sCPhiFunc] (Integer, Integer)
      ExitSet {[ , ], [ Integer (null), Phi-Function ]}


Method: if2
   SSANode 0:
      EntrySet {[ , ], [ , ]}
         NoOpnd[sCloadConst]
         NoOpnd[sCloadConst]
      ExitSet {[ , ], [ Integer (1), Integer (2) ]}

   SSANode 1:
      EntrySet {[ , ], [ Integer (1), Integer (2) ]}
         NoOpnd[sCloadConst]
      ExitSet {[ , ], [ Integer (6), Integer (2) ]}

   SSANode 2:
      EntrySet {[ , ], [ Integer (1), Integer (2) ]}
         NoOpnd[sCloadConst]
      ExitSet {[ , ], [ Integer (8), Integer (2) ]}

   SSANode 3:
      EntrySet {[ , ], [ Phi-Function, Integer (2) ]}
         PhiFunction[sCPhiFunc] (Integer, Integer)
         NoOpnd[sCloadConst]
         Dyadic[sCadd] ( Phi-Function, Integer )
      ExitSet {[ , ], [ Integer (null), Phi-Function ]}


Method: if3
   SSANode 0:
      EntrySet {[ , ], [ , , , , ]}
         NoOpnd[sCloadConst]
         NoOpnd[sCloadConst]
      ExitSet {[ , ], [ Integer (0), Integer (1), , , ]}

   SSANode 1:
      EntrySet {[ , ], [ Integer (0), Integer (1), , , ]}
         NoOpnd[sCloadConst]
      ExitSet {[ , ], [ Integer (0), Integer (1), , , ]}

   SSANode 2:
      EntrySet {[ , ], [ Integer (0), Integer (1), , , ]}
         NoOpnd[sCloadConst]
         Dyadic[sCadd] ( Integer, Integer )
         NoOpnd[sCloadConst]
      ExitSet {[ , ], [ Integer (null), Integer (1), , , ]}

   SSANode 3:
      EntrySet {[ , ], [ Integer (null), Integer (1), , , ]}
         NoOpnd[sCloadConst]
         Dyadic[sCadd] ( Integer, Integer )
         NoOpnd[sCloadConst]
      ExitSet {[ , ], [ Integer (null), Integer (null), , , ]}

   SSANode 4:
      EntrySet {[ , ], [ Integer (null), Integer (null), , , ]}
         NoOpnd[sCloadConst]
         NoOpnd[sCloadConst]
         Dyadic[sCsub] ( Integer, Integer )
         NoOpnd[sCloadConst]
         Dyadic[sCadd] ( Integer, Integer )
      ExitSet {[ , ], [ Integer (null), Integer (null), Integer (1), Integer (2), Integer (null) ]}

   SSANode 5:
      EntrySet {[ , ], [ Phi-Function, Phi-Function, Integer (1), Integer (2), Integer (null) ]}
         PhiFunction[sCPhiFunc] (Integer, Integer, Integer, Integer)
         PhiFunction[sCPhiFunc] (Integer, Integer, Integer)
      ExitSet {[ , ], [ Phi-Function, Phi-Function, Integer (1), Integer (2), Integer (null) ]}


Method: if4
   SSANode 0:
      EntrySet {[ ], [ , , , ]}
         NoOpnd[sCloadConst]
         NoOpnd[sCloadConst]
         NoOpnd[sCloadConst]
      ExitSet {[ ], [ , Integer (1), Integer (1), Integer (0) ]}

   SSANode 1:
      EntrySet {[ ], [ , Integer (1), Integer (1), Integer (0) ]}
         NoOpnd[sCloadConst]
      ExitSet {[ ], [ , Integer (1), Integer (1), Integer (8) ]}

   SSANode 2:
      EntrySet {[ ], [ , Integer (1), Integer (1), Integer (0) ]}
         NoOpnd[sCloadConst]
      ExitSet {[ ], [ , Integer (1), Integer (1), Integer (2) ]}

   SSANode 3:
      EntrySet {[ ], [ , Integer (1), Integer (1), Phi-Function ]}
         PhiFunction[sCPhiFunc] (Integer, Integer)
         NoOpnd[sCloadConst]
         Dyadic[sCadd] ( Phi-Function, Integer )
      ExitSet {[ ], [ , Integer (1), Integer (null), Phi-Function ]}

