	public void forIfWhile(){
		for(int i = 0; i < 100; i++){
			if(i > 50){
				while(i < 75){
					i++;
				}
			}
			
		}
	}

	"public void forIfWhile()"
	//nofStackSlots=2, nofLocalSlots=2, codeLen=33 
	{
		  0 iconst_0
		  1 istore_1 [i]
		  2 goto 26
		  5 iload_1 [i]
		  6 bipush 50
		  8 if_icmple 23
		 11 goto 17
		 14 iinc i, 1
		 17 iload_1 [i]
		 18 bipush 75
		 20 if_icmplt 14
		 23 iinc i, 1
		 26 iload_1 [i]
		 27 bipush 100
		 29 if_icmplt 5
		 32 return

CFG of method forIfWhile
	nodeNr:0 from 0 to 2	visited: false
		predecessor: 
		successor: CFG-Node [26:29]	
	nodeNr:1 from 5 to 8	visited: false
		predecessor: CFG-Node [26:29]	
		successor: CFG-Node [11:11]	CFG-Node [23:23]	
	nodeNr:2 from 11 to 11	visited: false
		predecessor: CFG-Node [5:8]	
		successor: CFG-Node [17:20]	
	nodeNr:3 from 14 to 14	visited: false
		predecessor: CFG-Node [17:20]	
		successor: CFG-Node [17:20]	
	nodeNr:4 from 17 to 20	is loop header visited: false
		predecessor: CFG-Node [11:11]	CFG-Node [14:14]	
		successor: CFG-Node [23:23]	CFG-Node [14:14]	
	nodeNr:5 from 23 to 23	visited: false
		predecessor: CFG-Node [5:8]	CFG-Node [17:20]	
		successor: CFG-Node [26:29]	
	nodeNr:6 from 26 to 29	is loop header visited: false
		predecessor: CFG-Node [0:2]	CFG-Node [23:23]	
		successor: CFG-Node [32:32]	CFG-Node [5:8]	
	nodeNr:7 from 32 to 32	visited: false
		predecessor: CFG-Node [26:29]	
		successor: 

SSA for Method: forIfWhile
   SSANode 0:
      EntrySet {[ , ], [ , ]}
         0: NoOpnd[sCloadConst] 0 (Integer),   end=17, index=1, reg=3, join={17}
         1: NoOpnd[sCloadLocal] (Ref),   end=16, index=0, reg=2, join={16}
         2: Branch[sCBranch]  (Void)
      ExitSet {[ , ], [ 1 (Ref), 0 (Integer) ]}

   SSANode 1:
      EntrySet {[ , ], [ Phi-Function(16), Phi-Function(17) ]}
         3: NoOpnd[sCloadConst] 50 (Integer),   end=4
         4: Branch[sCBranch] {3, 17} (Void)
      ExitSet {[ , ], [ Phi-Function(16), Phi-Function(17) ]}

   SSANode 2:
      EntrySet {[ , ], [ Phi-Function(16), Phi-Function(17) ]}
         5: Branch[sCBranch]  (Void)
      ExitSet {[ , ], [ Phi-Function(16), Phi-Function(17) ]}

   SSANode 3:
      EntrySet {[ , ], [ Phi-Function(8), Phi-Function(9) ]}
         6: NoOpnd[sCloadConst] 1 (Integer),   end=7
         7: Dyadic[sCadd] {9, 6} (Integer),   end=9, index=1, reg=3, join={9}
      ExitSet {[ , ], [ Phi-Function(8), 7 (Integer) ]}

   SSANode 4:
      EntrySet {[ , ], [ Phi-Function(8), Phi-Function(9) ]}
         8: PhiFunction[sCPhiFunc] {16} (Phi-Function),   end=12, index=0, reg=2, join={12} deleted
         9: PhiFunction[sCPhiFunc] {17, 7} (Phi-Function),   end=13, index=1, reg=3, join={13}
         10: NoOpnd[sCloadConst] 75 (Integer),   end=11
         11: Branch[sCBranch] {10, 9} (Void)
      ExitSet {[ , ], [ Phi-Function(8), Phi-Function(9) ]}

   SSANode 5:
      EntrySet {[ , ], [ Phi-Function(12), Phi-Function(13) ]}
         12: PhiFunction[sCPhiFunc] {16, 8} (Phi-Function),   end=12, index=0, reg=2
         13: PhiFunction[sCPhiFunc] {17, 9} (Phi-Function),   end=15, index=1, reg=2
         14: NoOpnd[sCloadConst] 1 (Integer),   end=15
         15: Dyadic[sCadd] {13, 14} (Integer),   end=17, index=1, reg=3, join={17}
      ExitSet {[ , ], [ Phi-Function(12), 15 (Integer) ]}

   SSANode 6:
      EntrySet {[ , ], [ Phi-Function(16), Phi-Function(17) ]}
         16: PhiFunction[sCPhiFunc] {1} (Phi-Function),   end=12, index=0, reg=2, join={12} deleted
         17: PhiFunction[sCPhiFunc] {0, 15} (Phi-Function),   end=13, index=1, reg=2, join={13}
         18: NoOpnd[sCloadConst] 100 (Integer),   end=19
         19: Branch[sCBranch] {18, 17} (Void)
      ExitSet {[ , ], [ Phi-Function(16), Phi-Function(17) ]}

   SSANode 7:
      EntrySet {[ , ], [ Phi-Function(16), Phi-Function(17) ]}
         20: Branch[sCreturn]  (Void)
      ExitSet {[ , ], [ Phi-Function(16), Phi-Function(17) ]}

Code for Method:forIfWhile
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	38600000	[0xc]	li  r3, 0
	48000020	[0x10]	b  32, [0x30]	
	2c020032	[0x14]	cmpi  crf0, 0, r2, 50
	409e0014	[0x18]	bc  iffalse, CRF0[GT], 20, [0x2c]	
	48000008	[0x1c]	b  8, [0x24]	
	38630001	[0x20]	addi  r3, r3, 1
	2c03004b	[0x24]	cmpi  crf0, 0, r3, 75
	419ffff8	[0x28]	bc  iftrue, CRF0[LT], -8, [0x20]	
	38620001	[0x2c]	addi  r3, r2, 1
	2c020064	[0x30]	cmpi  crf0, 0, r2, 100
	419fffe0	[0x34]	bc  iftrue, CRF0[LT], -32, [0x14]	
	8001000c	[0x38]	lwz  r0, 12(r1)
	7c0803a6	[0x3c]	mtspr  LR, r0
	38210010	[0x40]	addi  r1, r1, 16
	4e800020	[0x44]	bclr always, CRF7[SO]
