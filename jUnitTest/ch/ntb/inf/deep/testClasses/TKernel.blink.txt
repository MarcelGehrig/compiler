	public static void blink(int nTimes) {
		int delay = 100000;
		for (int i = 0; i < nTimes; i++) {
			for (int k = 0; k < delay; k++);
			for (int k = 0; k < delay; k++);
		}
		for (int k = 0; k < (1000000 - nTimes * 10000); k++);
	}

SSA for Method: blink
   SSANode 0:
      EntrySet {[ , , , ], [ , , , ]}
         0: NoOpnd[sCloadConst] 100000 (Integer),   end=0, index=5, reg=3, join={25}
         1: NoOpnd[sCloadConst] 0 (Integer),   end=1, index=6, reg=4, join={26}
         2: NoOpnd[sCloadLocal] (Integer),   end=2, index=4, reg=2, join={24}
         3: Branch[sCBranch]  (Void)
      ExitSet {[ , , , ], [ 2 (Integer), 0 (Integer), 1 (Integer), ]}

   SSANode 1:
      EntrySet {[ , , , ], [ Phi-Function(24), Phi-Function(25), Phi-Function(26), Phi-Function(27) ]}
         4: NoOpnd[sCloadConst] 0 (Integer),   end=4, index=7, reg=5, join={11}
         5: Branch[sCBranch]  (Void)
      ExitSet {[ , , , ], [ Phi-Function(24), Phi-Function(25), Phi-Function(26), 4 (Integer) ]}

   SSANode 2:
      EntrySet {[ , , , ], [ Phi-Function(8), Phi-Function(9), Phi-Function(10), Phi-Function(11) ]}
         6: NoOpnd[sCloadConst] 1 (Integer),   end=7
         7: Dyadic[sCadd] {11, 6} (Integer),   end=12, index=7, reg=5, join={11}
      ExitSet {[ , , , ], [ Phi-Function(8), Phi-Function(9), Phi-Function(10), 7 (Integer) ]}

   SSANode 3:  loop header
      EntrySet {[ , , , ], [ Phi-Function(8), Phi-Function(9), Phi-Function(10), Phi-Function(11) ]}
         8: PhiFunction[sCPhiFunc] {24} (Phi-Function),   start=8, end=12, index=4, reg=2, join={24}, last=12 deleted
         9: PhiFunction[sCPhiFunc] {25} (Phi-Function),   start=9, end=12, index=5, reg=3, join={25}, last=12 deleted
         10: PhiFunction[sCPhiFunc] {26} (Phi-Function),   start=10, end=12, index=6, reg=4, join={26}, last=12 deleted
         11: PhiFunction[sCPhiFunc] {4, 7} (Phi-Function),   start=4, end=12, index=7, reg=5, last=12
         12: Branch[sCBranch] {9, 11} (Void)
      ExitSet {[ , , , ], [ Phi-Function(8), Phi-Function(9), Phi-Function(10), Phi-Function(11) ]}

   SSANode 4:
      EntrySet {[ , , , ], [ Phi-Function(8), Phi-Function(9), Phi-Function(10), Phi-Function(11) ]}
         13: NoOpnd[sCloadConst] 0 (Integer),   end=13, index=7, reg=5, join={20}
         14: Branch[sCBranch]  (Void)
      ExitSet {[ , , , ], [ Phi-Function(8), Phi-Function(9), Phi-Function(10), 13 (Integer) ]}

   SSANode 5:
      EntrySet {[ , , , ], [ Phi-Function(17), Phi-Function(18), Phi-Function(19), Phi-Function(20) ]}
         15: NoOpnd[sCloadConst] 1 (Integer),   end=16
         16: Dyadic[sCadd] {20, 15} (Integer),   end=21, index=7, reg=5, join={20}
      ExitSet {[ , , , ], [ Phi-Function(17), Phi-Function(18), Phi-Function(19), 16 (Integer) ]}

   SSANode 6:  loop header
      EntrySet {[ , , , ], [ Phi-Function(17), Phi-Function(18), Phi-Function(19), Phi-Function(20) ]}
         17: PhiFunction[sCPhiFunc] {24} (Phi-Function),   start=17, end=21, index=4, reg=2, join={24}, last=21 deleted
         18: PhiFunction[sCPhiFunc] {25} (Phi-Function),   start=18, end=21, index=5, reg=3, join={25}, last=21 deleted
         19: PhiFunction[sCPhiFunc] {26} (Phi-Function),   start=19, end=21, index=6, reg=4, join={26}, last=21 deleted
         20: PhiFunction[sCPhiFunc] {13, 16} (Phi-Function),   start=13, end=21, index=7, reg=5, last=21
         21: Branch[sCBranch] {18, 20} (Void)
      ExitSet {[ , , , ], [ Phi-Function(17), Phi-Function(18), Phi-Function(19), Phi-Function(20) ]}

   SSANode 7:
      EntrySet {[ , , , ], [ Phi-Function(17), Phi-Function(18), Phi-Function(19), Phi-Function(20) ]}
         22: NoOpnd[sCloadConst] 1 (Integer),   end=23
         23: Dyadic[sCadd] {19, 22} (Integer),   end=23, index=6, reg=4, join={26}
      ExitSet {[ , , , ], [ Phi-Function(17), Phi-Function(18), 23 (Integer), Phi-Function(20) ]}

   SSANode 8:  loop header
      EntrySet {[ , , , ], [ Phi-Function(24), Phi-Function(25), Phi-Function(26), Phi-Function(27) ]}
         24: PhiFunction[sCPhiFunc] {2} (Phi-Function),   start=2, end=41, index=4, reg=2, last=28 deleted
         25: PhiFunction[sCPhiFunc] {0} (Phi-Function),   start=0, end=28, index=5, reg=3, last=28 deleted
         26: PhiFunction[sCPhiFunc] {1, 23} (Phi-Function),   start=1, end=28, index=6, reg=4, last=28
         27: PhiFunction[sCPhiFunc] {20} (Phi-Function),   start=27, end=28, index=7, reg=5, join={20}, last=28 deleted
         28: Branch[sCBranch] {24, 26} (Void)
      ExitSet {[ , , , ], [ Phi-Function(24), Phi-Function(25), Phi-Function(26), Phi-Function(27) ]}

   SSANode 9:
      EntrySet {[ , , , ], [ Phi-Function(24), Phi-Function(25), Phi-Function(26), Phi-Function(27) ]}
         29: NoOpnd[sCloadConst] 0 (Integer),   end=29, index=6, reg=4, join={35}
         30: Branch[sCBranch]  (Void)
      ExitSet {[ , , , ], [ Phi-Function(24), Phi-Function(25), 29 (Integer), Phi-Function(27) ]}

   SSANode 10:
      EntrySet {[ , , , ], [ Phi-Function(33), Phi-Function(34), Phi-Function(35), Phi-Function(36) ]}
         31: NoOpnd[sCloadConst] 1 (Integer),   end=32
         32: Dyadic[sCadd] {35, 31} (Integer),   end=41, index=6, reg=4, join={35}
      ExitSet {[ , , , ], [ Phi-Function(33), Phi-Function(34), 32 (Integer), Phi-Function(36) ]}

   SSANode 11:  loop header
      EntrySet {[ , , , ], [ Phi-Function(33), Phi-Function(34), Phi-Function(35), Phi-Function(36) ]}
         33: PhiFunction[sCPhiFunc] {24} (Phi-Function),   start=33, end=41, index=4, reg=2, join={24}, last=41 deleted
         34: PhiFunction[sCPhiFunc] {25} (Phi-Function),   start=34, end=41, index=5, reg=3, join={25}, last=41 deleted
         35: PhiFunction[sCPhiFunc] {29, 32} (Phi-Function),   start=29, end=41, index=6, reg=4, last=41
         36: PhiFunction[sCPhiFunc] {20} (Phi-Function),   start=36, end=41, index=7, reg=5, join={20}, last=41 deleted
         37: NoOpnd[sCloadConst] 1000000 (Integer),   end=40, reg=3
         38: NoOpnd[sCloadConst] 10000 (Integer),   end=39
         39: Dyadic[sCmul] {33, 38} (Integer),   end=41, reg=4
         40: Dyadic[sCsub] {37, 39} (Integer),   end=41, reg=3
         41: Branch[sCBranch] {40, 35} (Void)
      ExitSet {[ , , , ], [ Phi-Function(33), Phi-Function(34), Phi-Function(35), Phi-Function(36) ]}

   SSANode 12:
      EntrySet {[ , , , ], [ Phi-Function(33), Phi-Function(34), Phi-Function(35), Phi-Function(36) ]}
         42: Branch[sCreturn]  (Void)
      ExitSet {[ , , , ], [ Phi-Function(33), Phi-Function(34), Phi-Function(35), Phi-Function(36) ]}

Code for Method: blink
	9421fff0	[0x0]	stwu  r1, -16(r1)
	7c0802a6	[0x4]	mfspr  r0, LR
	9001000c	[0x8]	stw  r0, 12(r1)
	386086a0	[0xc]	li  r3, -31072
	3c630002	[0x10]	addis  r3, r3, 2
	38800000	[0x14]	li  r4, 0
	48000030	[0x18]	b  48, [0x48]
	38a00000	[0x1c]	li  r5, 0
	48000008	[0x20]	b  8, [0x28]
	38a50001	[0x24]	addi  r5, r5, 1
	7c051800	[0x28]	cmp crf0, 0, r5, r3
	4180fff8	[0x2c]	bc  iftrue, CRF0[LT], -8, [0x24]
	38a00000	[0x30]	li  r5, 0
	48000008	[0x34]	b  8, [0x3c]
	38a50001	[0x38]	addi  r5, r5, 1
	7c051800	[0x3c]	cmp crf0, 0, r5, r3
	4180fff8	[0x40]	bc  iftrue, CRF0[LT], -8, [0x38]
	38840001	[0x44]	addi  r4, r4, 1
	7c041000	[0x48]	cmp crf0, 0, r4, r2
	4180ffd0	[0x4c]	bc  iftrue, CRF0[LT], -48, [0x1c]
	38800000	[0x50]	li  r4, 0
	48000008	[0x54]	b  8, [0x5c]
	38840001	[0x58]	addi  r4, r4, 1
	38604240	[0x5c]	li  r3, 16960
	3c63000f	[0x60]	addis  r3, r3, 15
	1c822710	[0x64]	mulli  r4, r2, 10000
	7c641850	[0x68]	subf  r3, r4, r3
	7c041800	[0x6c]	cmp crf0, 0, r4, r3
	4180ffe8	[0x70]	bc  iftrue, CRF0[LT], -24, [0x58]
	8001000c	[0x74]	lwz  r0, 12(r1)
	7c0803a6	[0x78]	mtspr  LR, r0
	38210010	[0x7c]	addi  r1, r1, 16
	4e800020	[0x80]	bclr always, CRF0[LT]
