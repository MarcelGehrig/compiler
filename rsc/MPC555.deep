#deep-0

meta {
	version = "2010-09-07";
	description = "Freescale MPC555 (all devices)";
}

sysconst {
	IMB = 0x0;										# Internal Memory Base
	SRAMA_BaseAddr = IMB + 0x3F9800;				# Internal SRAM A Base Address
	SRAMA_Size = 0x2800;							# Internal SRAM A Size (10 KiB)
	SRAMB_BaseAddr = SRAMA_BaseAddr + SRAMA_Size;	# Internal SRAM B Base Address
	SRAMB_Size = 0x4000;							# Internal SRAM B Size (16 KiB)
	CMFA_BaseAddr = IMB + 0x0;						# Internal Flash A Base Address
	CMFA_Size = 0x4000;								# Internal Flash A Size (256 KiB)
	CMFB = CMFA_BaseAddr + CMFA_Size;				# Internal Flash B Base Address
	CMFB_Size = 0x3000;								# Internal Flash B Size (192 KiB)
	
	sysTabBaseAddr = SRAMA_BaseAddr;				# Base address of the systemtable segment
	stackSize = 0x2000;								# Default stack size
}

memorymap {

	device InternalRam {
		attributes = read, write, const, code, var, systab, heap, stack;
		width = 4; # byte
		size = 0x6800; #10+16kB
		base = SRAMA_BaseAddr;
	}
	
	device InternalFlash {
		attributes = read;
		width = 4; # byte
		size = CMFA_Size + CMFB_Size;
		base = CMFA_BaseAddr;
	}
	
	segment InternalRam.SysTab {
		base = sysTabBaseAddr;
		attributes = read, write, systab;
	}
	
	segment InternalRam.Constants {
		attributes = read, write, const;
	}
	
	segment InternalRam.Code {
		attributes = read, write, code;
	}
	
	segment InternalRam.Variables {
		attributes = read, write, var;
	}
	
	segment InternalRam.Stack {
		attributes = read, write, stack;
		size = stackSize;
	}
	
	segment InternalFlash.A {
		base = internalFlashABaseAddr;
		width = 4;
		size = CMFA_Size;
		
		segment block0 {
		   attributes = read, write, code;
		   base =  internalFlashABaseAddr;
		   size = CMFA_Size;
		   
		   segment ExcCode {
		      base = 0x5000;
		   }
		}
	}
	
	segment InternalFlash.B {
		base =  a;
		width = 4;
		size = CMFB_Size;

	}
	
	segment InternalFlash.B.S2 {
        width = 4;
        size = CMFB_Size;
	}
}

registermap {
	register R0 {
		type = GPR;
		addr = 0;
		size = 4;
		repr = Hex;
	}
}

targetconfiguration BootFromFlash {
    modules {
            kernel : code@ExternalFlash.S1, const@ExternalFlash, var@InternalRam;
            heap, exception : code@ExternalFlash.S1, const@ExternalFlash, var@InternalRam;
            default: code@ExternalFlash.ExcCode, const@ExternalFlash, var@InternalRam;
            ch.ntb.inf.myProject.package1.Class1,
            ch.ntb.inf.myProject.package1.Class2,
            ch.ntb.inf.myProject.package1.Class3,
            ch.ntb.inf.myProject.package1.Class4,
            ch.ntb.inf.myProject.package1.Class5 : code@ExternalFlash.S1, const@ExternalFlash, var@InternalRam;
            ch.ntb.inf.myProject.package2.* : code@ExternalFlash.S1, const@ExternalFlash, var@InternalRam;
    }
}

targetconfiguration BootFromRam {
    modules {
            kernel : code@ExternalFlash.S1, const@ExternalFlash, var@InternalRam;
            heap, exception : code@ExternalFlash.S1, const@ExternalFlash, var@InternalRam;
            default: code@ExternalFlash.ExcCode, const@ExternalFlash, var@InternalRam;
            ch.ntb.inf.myProject.package1.Class1,
            ch.ntb.inf.myProject.package1.Class2,
            ch.ntb.inf.myProject.package1.Class3,
            ch.ntb.inf.myProject.package1.Class4,
            ch.ntb.inf.myProject.package1.Class5 : code@ExternalFlash.S1, const@ExternalFlash, var@InternalRam;
            ch.ntb.inf.myProject.package2.* : code@ExternalFlash.S1, const@ExternalFlash, var@InternalRam;
    }
}

